/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductOption {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "product_option_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub product_option_id: Option<Option<String>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "sort_order", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<Option<i32>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "required", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub required: Option<Option<bool>>,
    #[serde(rename = "available", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub available: Option<Option<bool>>,
    #[serde(rename = "used_in_combination", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub used_in_combination: Option<Option<bool>>,
    #[serde(rename = "option_items", skip_serializing_if = "Option::is_none")]
    pub option_items: Option<Vec<models::ProductOptionItem>>,
    #[serde(rename = "additional_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub additional_fields: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<serde_json::Value>>,
}

impl ProductOption {
    pub fn new() -> ProductOption {
        ProductOption {
            id: None,
            product_option_id: None,
            name: None,
            description: None,
            sort_order: None,
            r#type: None,
            required: None,
            available: None,
            used_in_combination: None,
            option_items: None,
            additional_fields: None,
            custom_fields: None,
        }
    }
}

