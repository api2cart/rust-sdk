/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductOptionAdd {
    /// Defines option's name
    #[serde(rename = "name")]
    pub name: String,
    /// Defines option's type that has to be added
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Defines product id where the option should be added
    #[serde(rename = "product_id", skip_serializing_if = "Option::is_none")]
    pub product_id: Option<String>,
    /// Defines default option value that has to be added
    #[serde(rename = "default_option_value", skip_serializing_if = "Option::is_none")]
    pub default_option_value: Option<String>,
    /// Defines option values that has to be added
    #[serde(rename = "option_values", skip_serializing_if = "Option::is_none")]
    pub option_values: Option<String>,
    /// Defines option's description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Defines whether the option is available
    #[serde(rename = "avail", skip_serializing_if = "Option::is_none")]
    pub avail: Option<bool>,
    /// Sort number in the list
    #[serde(rename = "sort_order", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<i32>,
    /// Defines if the option is required
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// An array of option values.</b>
    #[serde(rename = "values", skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<models::ProductOptionAddValuesInner>>,
    /// Is cache clear required
    #[serde(rename = "clear_cache", skip_serializing_if = "Option::is_none")]
    pub clear_cache: Option<bool>,
}

impl ProductOptionAdd {
    pub fn new(name: String, r#type: Type) -> ProductOptionAdd {
        ProductOptionAdd {
            name,
            r#type,
            product_id: None,
            default_option_value: None,
            option_values: None,
            description: None,
            avail: None,
            sort_order: None,
            required: None,
            values: None,
            clear_cache: None,
        }
    }
}
/// Defines option's type that has to be added
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "option_type_select")]
    OptionTypeSelect,
    #[serde(rename = "option_type_text")]
    OptionTypeText,
    #[serde(rename = "option_type_radio")]
    OptionTypeRadio,
    #[serde(rename = "option_type_checkbox")]
    OptionTypeCheckbox,
    #[serde(rename = "option_type_textarea")]
    OptionTypeTextarea,
    #[serde(rename = "option_type_readonly")]
    OptionTypeReadonly,
    #[serde(rename = "option_type_multiselect")]
    OptionTypeMultiselect,
    #[serde(rename = "option_type_multicheckbox")]
    OptionTypeMulticheckbox,
    #[serde(rename = "option_type_file")]
    OptionTypeFile,
    #[serde(rename = "option_type_date")]
    OptionTypeDate,
    #[serde(rename = "option_type_datetime")]
    OptionTypeDatetime,
    #[serde(rename = "option_type_time")]
    OptionTypeTime,
}

impl Default for Type {
    fn default() -> Type {
        Self::OptionTypeSelect
    }
}

