/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Child {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    #[serde(rename = "sku", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sku: Option<Option<String>>,
    #[serde(rename = "upc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upc: Option<Option<String>>,
    #[serde(rename = "ean", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ean: Option<Option<String>>,
    #[serde(rename = "mpn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mpn: Option<Option<String>>,
    #[serde(rename = "gtin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gtin: Option<Option<String>>,
    #[serde(rename = "isbn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub isbn: Option<Option<String>>,
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    #[serde(rename = "seo_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seo_url: Option<Option<String>>,
    #[serde(rename = "sort_order", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<Option<i32>>,
    #[serde(rename = "created_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<Option<Box<models::A2CDateTime>>>,
    #[serde(rename = "modified_time", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub modified_time: Option<Option<Box<models::A2CDateTime>>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "short_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub short_description: Option<Option<String>>,
    #[serde(rename = "full_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_description: Option<Option<String>>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<models::Image>>,
    #[serde(rename = "combination", skip_serializing_if = "Option::is_none")]
    pub combination: Option<Vec<models::ProductChildItemCombination>>,
    #[serde(rename = "default_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_price: Option<Option<f64>>,
    #[serde(rename = "cost_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost_price: Option<Option<f64>>,
    #[serde(rename = "list_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub list_price: Option<Option<f64>>,
    #[serde(rename = "wholesale_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wholesale_price: Option<Option<f64>>,
    #[serde(rename = "advanced_price", skip_serializing_if = "Option::is_none")]
    pub advanced_price: Option<Vec<models::ProductAdvancedPrice>>,
    #[serde(rename = "tax_class_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tax_class_id: Option<Option<String>>,
    #[serde(rename = "avail_for_sale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avail_for_sale: Option<Option<bool>>,
    #[serde(rename = "allow_backorders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allow_backorders: Option<Option<bool>>,
    #[serde(rename = "in_stock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub in_stock: Option<Option<bool>>,
    #[serde(rename = "on_sale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub on_sale: Option<Option<bool>>,
    #[serde(rename = "manage_stock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub manage_stock: Option<Option<bool>>,
    #[serde(rename = "inventory_level", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inventory_level: Option<Option<f64>>,
    #[serde(rename = "inventory", skip_serializing_if = "Option::is_none")]
    pub inventory: Option<Vec<models::ProductInventory>>,
    #[serde(rename = "min_quantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_quantity: Option<Option<f64>>,
    #[serde(rename = "low_stock_threshold", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub low_stock_threshold: Option<Option<f64>>,
    #[serde(rename = "default_qty_in_pack", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_qty_in_pack: Option<Option<f64>>,
    #[serde(rename = "is_qty_in_pack_fixed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_qty_in_pack_fixed: Option<Option<bool>>,
    #[serde(rename = "weight_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight_unit: Option<Option<String>>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<f64>>,
    #[serde(rename = "dimensions_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dimensions_unit: Option<Option<String>>,
    #[serde(rename = "width", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub width: Option<Option<f64>>,
    #[serde(rename = "height", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub height: Option<Option<f64>>,
    #[serde(rename = "length", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub length: Option<Option<f64>>,
    #[serde(rename = "meta_title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_title: Option<Option<String>>,
    #[serde(rename = "meta_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_description: Option<Option<String>>,
    #[serde(rename = "meta_keywords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_keywords: Option<Option<String>>,
    #[serde(rename = "discounts", skip_serializing_if = "Option::is_none")]
    pub discounts: Option<Vec<models::Discount>>,
    #[serde(rename = "is_virtual", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_virtual: Option<Option<bool>>,
    #[serde(rename = "additional_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub additional_fields: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<serde_json::Value>>,
}

impl Child {
    pub fn new() -> Child {
        Child {
            id: None,
            parent_id: None,
            sku: None,
            upc: None,
            ean: None,
            mpn: None,
            gtin: None,
            isbn: None,
            url: None,
            seo_url: None,
            sort_order: None,
            created_time: None,
            modified_time: None,
            name: None,
            short_description: None,
            full_description: None,
            images: None,
            combination: None,
            default_price: None,
            cost_price: None,
            list_price: None,
            wholesale_price: None,
            advanced_price: None,
            tax_class_id: None,
            avail_for_sale: None,
            allow_backorders: None,
            in_stock: None,
            on_sale: None,
            manage_stock: None,
            inventory_level: None,
            inventory: None,
            min_quantity: None,
            low_stock_threshold: None,
            default_qty_in_pack: None,
            is_qty_in_pack_fixed: None,
            weight_unit: None,
            weight: None,
            dimensions_unit: None,
            width: None,
            height: None,
            length: None,
            meta_title: None,
            meta_description: None,
            meta_keywords: None,
            discounts: None,
            is_virtual: None,
            additional_fields: None,
            custom_fields: None,
        }
    }
}

