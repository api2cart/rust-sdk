/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomerAddressAdd {
    /// Defines customer id
    #[serde(rename = "customer_id")]
    pub customer_id: String,
    /// Store Id
    #[serde(rename = "store_id", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// Defines customer's address first name
    #[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    /// Defines customer's address last name
    #[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    /// Defines customer's address company
    #[serde(rename = "company", skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,
    /// Specifies customer's address address1
    #[serde(rename = "address1")]
    pub address1: String,
    /// Specifies customer's address address2
    #[serde(rename = "address2", skip_serializing_if = "Option::is_none")]
    pub address2: Option<String>,
    /// Specifies customer's address city
    #[serde(rename = "city")]
    pub city: String,
    /// Specifies customer's address ISO code or name of country
    #[serde(rename = "country")]
    pub country: String,
    /// Specifies customer's address ISO code or name of state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Specifies customer's address postcode
    #[serde(rename = "postcode")]
    pub postcode: String,
    /// Specifies the national ID card number of this person, or a unique tax identification number for customer's address
    #[serde(rename = "identification_number", skip_serializing_if = "Option::is_none")]
    pub identification_number: Option<String>,
    /// Specifies customer's address types
    #[serde(rename = "types", skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
    /// Specifies whether the customer's address is used by default
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    /// Defines customer's address phone number
    #[serde(rename = "phone", skip_serializing_if = "Option::is_none")]
    pub phone: Option<String>,
    /// Defines customer's address mobile phone number
    #[serde(rename = "phone_mobile", skip_serializing_if = "Option::is_none")]
    pub phone_mobile: Option<String>,
    /// Defines customer's address fax
    #[serde(rename = "fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    /// Defines Link to customer's address website
    #[serde(rename = "website", skip_serializing_if = "Option::is_none")]
    pub website: Option<String>,
    /// Defines customer's address gender
    #[serde(rename = "gender", skip_serializing_if = "Option::is_none")]
    pub gender: Option<String>,
    /// Add Tax Id
    #[serde(rename = "tax_id", skip_serializing_if = "Option::is_none")]
    pub tax_id: Option<String>,
    /// Specifies customer's alias in the address book
    #[serde(rename = "alias", skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,
}

impl CustomerAddressAdd {
    pub fn new(customer_id: String, address1: String, city: String, country: String, postcode: String) -> CustomerAddressAdd {
        CustomerAddressAdd {
            customer_id,
            store_id: None,
            first_name: None,
            last_name: None,
            company: None,
            address1,
            address2: None,
            city,
            country,
            state: None,
            postcode,
            identification_number: None,
            types: None,
            default: None,
            phone: None,
            phone_mobile: None,
            fax: None,
            website: None,
            gender: None,
            tax_id: None,
            alias: None,
        }
    }
}

