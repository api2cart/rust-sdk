/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Product {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<String>>,
    #[serde(rename = "u_model", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_model: Option<Option<String>>,
    #[serde(rename = "u_sku", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_sku: Option<Option<String>>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "short_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub short_description: Option<Option<String>>,
    #[serde(rename = "price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub price: Option<Option<f64>>,
    #[serde(rename = "advanced_price", skip_serializing_if = "Option::is_none")]
    pub advanced_price: Option<Vec<models::ProductAdvancedPrice>>,
    #[serde(rename = "cost_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost_price: Option<Option<f64>>,
    #[serde(rename = "quantity", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<Option<f64>>,
    #[serde(rename = "inventory", skip_serializing_if = "Option::is_none")]
    pub inventory: Option<Vec<models::ProductInventory>>,
    #[serde(rename = "group_items", skip_serializing_if = "Option::is_none")]
    pub group_items: Option<Vec<models::ProductGroupItem>>,
    #[serde(rename = "u_brand_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_brand_id: Option<Option<String>>,
    #[serde(rename = "u_brand", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_brand: Option<Option<String>>,
    #[serde(rename = "categories_ids", skip_serializing_if = "Option::is_none")]
    pub categories_ids: Option<Vec<String>>,
    #[serde(rename = "stores_ids", skip_serializing_if = "Option::is_none")]
    pub stores_ids: Option<Vec<String>>,
    #[serde(rename = "url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub url: Option<Option<String>>,
    #[serde(rename = "seo_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub seo_url: Option<Option<String>>,
    #[serde(rename = "meta_title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_title: Option<Option<String>>,
    #[serde(rename = "meta_keywords", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_keywords: Option<Option<String>>,
    #[serde(rename = "meta_description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub meta_description: Option<Option<String>>,
    #[serde(rename = "avail_sale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avail_sale: Option<Option<bool>>,
    #[serde(rename = "avail_view", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub avail_view: Option<Option<bool>>,
    #[serde(rename = "is_virtual", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_virtual: Option<Option<bool>>,
    #[serde(rename = "is_downloadable", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_downloadable: Option<Option<bool>>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<f64>>,
    #[serde(rename = "weight_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight_unit: Option<Option<String>>,
    #[serde(rename = "sort_order", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<Option<i32>>,
    #[serde(rename = "in_stock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub in_stock: Option<Option<bool>>,
    #[serde(rename = "backorders", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub backorders: Option<Option<String>>,
    #[serde(rename = "manage_stock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub manage_stock: Option<Option<String>>,
    #[serde(rename = "is_stock_managed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub is_stock_managed: Option<Option<bool>>,
    #[serde(rename = "on_sale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub on_sale: Option<Option<bool>>,
    #[serde(rename = "create_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub create_at: Option<Option<Box<models::A2CDateTime>>>,
    #[serde(rename = "modified_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub modified_at: Option<Option<Box<models::A2CDateTime>>>,
    #[serde(rename = "tax_class_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tax_class_id: Option<Option<String>>,
    #[serde(rename = "special_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub special_price: Option<Option<Box<models::SpecialPrice>>>,
    #[serde(rename = "tier_price", skip_serializing_if = "Option::is_none")]
    pub tier_price: Option<Vec<models::ProductTierPrice>>,
    #[serde(rename = "group_price", skip_serializing_if = "Option::is_none")]
    pub group_price: Option<Vec<models::ProductGroupPrice>>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<models::Image>>,
    #[serde(rename = "product_options", skip_serializing_if = "Option::is_none")]
    pub product_options: Option<Vec<models::ProductOption>>,
    #[serde(rename = "u_upc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_upc: Option<Option<String>>,
    #[serde(rename = "u_mpn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_mpn: Option<Option<String>>,
    #[serde(rename = "u_gtin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_gtin: Option<Option<String>>,
    #[serde(rename = "u_isbn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_isbn: Option<Option<String>>,
    #[serde(rename = "u_ean", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub u_ean: Option<Option<String>>,
    #[serde(rename = "related_products_ids", skip_serializing_if = "Option::is_none")]
    pub related_products_ids: Option<Vec<String>>,
    #[serde(rename = "up_sell_products_ids", skip_serializing_if = "Option::is_none")]
    pub up_sell_products_ids: Option<Vec<String>>,
    #[serde(rename = "cross_sell_products_ids", skip_serializing_if = "Option::is_none")]
    pub cross_sell_products_ids: Option<Vec<String>>,
    #[serde(rename = "dimensions_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dimensions_unit: Option<Option<String>>,
    #[serde(rename = "width", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub width: Option<Option<f64>>,
    #[serde(rename = "height", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub height: Option<Option<f64>>,
    #[serde(rename = "length", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub length: Option<Option<f64>>,
    #[serde(rename = "discounts", skip_serializing_if = "Option::is_none")]
    pub discounts: Option<Vec<models::Discount>>,
    #[serde(rename = "additional_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub additional_fields: Option<Option<serde_json::Value>>,
    #[serde(rename = "custom_fields", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<Option<serde_json::Value>>,
}

impl Product {
    pub fn new() -> Product {
        Product {
            id: None,
            r#type: None,
            u_model: None,
            u_sku: None,
            name: None,
            description: None,
            short_description: None,
            price: None,
            advanced_price: None,
            cost_price: None,
            quantity: None,
            inventory: None,
            group_items: None,
            u_brand_id: None,
            u_brand: None,
            categories_ids: None,
            stores_ids: None,
            url: None,
            seo_url: None,
            meta_title: None,
            meta_keywords: None,
            meta_description: None,
            avail_sale: None,
            avail_view: None,
            is_virtual: None,
            is_downloadable: None,
            weight: None,
            weight_unit: None,
            sort_order: None,
            in_stock: None,
            backorders: None,
            manage_stock: None,
            is_stock_managed: None,
            on_sale: None,
            create_at: None,
            modified_at: None,
            tax_class_id: None,
            special_price: None,
            tier_price: None,
            group_price: None,
            images: None,
            product_options: None,
            u_upc: None,
            u_mpn: None,
            u_gtin: None,
            u_isbn: None,
            u_ean: None,
            related_products_ids: None,
            up_sell_products_ids: None,
            cross_sell_products_ids: None,
            dimensions_unit: None,
            width: None,
            height: None,
            length: None,
            discounts: None,
            additional_fields: None,
            custom_fields: None,
        }
    }
}

