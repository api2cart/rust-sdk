/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CartCreate {
    /// Storeâ€™s identifier which you can get from cart_list method
    #[serde(rename = "cart_id")]
    pub cart_id: CartId,
    /// A web address of a store that you would like to connect to API2Cart
    #[serde(rename = "store_url", skip_serializing_if = "Option::is_none")]
    pub store_url: Option<String>,
    /// This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    #[serde(rename = "bridge_url", skip_serializing_if = "Option::is_none")]
    pub bridge_url: Option<String>,
    /// Absolute path to the store root directory (used with \"bridge_url\" parameter)
    #[serde(rename = "store_root", skip_serializing_if = "Option::is_none")]
    pub store_root: Option<String>,
    /// Set this parameter if bridge is already uploaded to store
    #[serde(rename = "store_key", skip_serializing_if = "Option::is_none")]
    pub store_key: Option<String>,
    /// Shared secret
    #[serde(rename = "shared_secret", skip_serializing_if = "Option::is_none")]
    pub shared_secret: Option<String>,
    /// Specify if api2cart should validate cart version
    #[serde(rename = "validate_version", skip_serializing_if = "Option::is_none")]
    pub validate_version: Option<bool>,
    /// Enables or disables cart's verification
    #[serde(rename = "verify", skip_serializing_if = "Option::is_none")]
    pub verify: Option<bool>,
    /// DB tables prefix
    #[serde(rename = "db_tables_prefix", skip_serializing_if = "Option::is_none")]
    pub db_tables_prefix: Option<String>,
    /// This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store's firewall may block specific values.
    #[serde(rename = "user_agent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
    /// FTP connection host
    #[serde(rename = "ftp_host", skip_serializing_if = "Option::is_none")]
    pub ftp_host: Option<String>,
    /// FTP User
    #[serde(rename = "ftp_user", skip_serializing_if = "Option::is_none")]
    pub ftp_user: Option<String>,
    /// FTP Password
    #[serde(rename = "ftp_password", skip_serializing_if = "Option::is_none")]
    pub ftp_password: Option<String>,
    /// FTP Port
    #[serde(rename = "ftp_port", skip_serializing_if = "Option::is_none")]
    pub ftp_port: Option<i32>,
    /// FTP Store dir
    #[serde(rename = "ftp_store_dir", skip_serializing_if = "Option::is_none")]
    pub ftp_store_dir: Option<String>,
    /// 3DCart API Key
    #[serde(rename = "apiKey_3dcart", skip_serializing_if = "Option::is_none")]
    pub api_key_3dcart: Option<String>,
    /// It's a BigCommerce account for which API is enabled
    #[serde(rename = "AdminAccount", skip_serializing_if = "Option::is_none")]
    pub admin_account: Option<String>,
    /// BigCommerce API URL
    #[serde(rename = "ApiPath", skip_serializing_if = "Option::is_none")]
    pub api_path: Option<String>,
    /// Bigcommerce API Key
    #[serde(rename = "ApiKey_Bigcommerce", skip_serializing_if = "Option::is_none")]
    pub api_key_bigcommerce: Option<String>,
    /// Client ID of the requesting app
    #[serde(rename = "client_id", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// Access token authorizing the app to access resources on behalf of a user
    #[serde(rename = "accessToken", skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// API Path section unique to the store
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<String>,
    /// Access token authorizing the app to access resources on behalf of a user
    #[serde(rename = "access_token", skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// Shopify API Key
    #[serde(rename = "apiKey_shopify", skip_serializing_if = "Option::is_none")]
    pub api_key_shopify: Option<String>,
    /// Shopify API Password
    #[serde(rename = "apiPassword", skip_serializing_if = "Option::is_none")]
    pub api_password: Option<String>,
    /// Access token authorizing the app to access resources on behalf of a user
    #[serde(rename = "accessToken_shopify", skip_serializing_if = "Option::is_none")]
    pub access_token_shopify: Option<String>,
    /// Neto API Key
    #[serde(rename = "apiKey", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<String>,
    /// Neto User Name
    #[serde(rename = "apiUsername", skip_serializing_if = "Option::is_none")]
    pub api_username: Option<String>,
    /// Volusion API Password
    #[serde(rename = "EncryptedPassword", skip_serializing_if = "Option::is_none")]
    pub encrypted_password: Option<String>,
    /// It's a Volusion account for which API is enabled
    #[serde(rename = "Login", skip_serializing_if = "Option::is_none")]
    pub login: Option<String>,
    /// It's a AspDotNetStorefront account for which API is available
    #[serde(rename = "apiUser_adnsf", skip_serializing_if = "Option::is_none")]
    pub api_user_adnsf: Option<String>,
    /// AspDotNetStorefront API Password
    #[serde(rename = "apiPass", skip_serializing_if = "Option::is_none")]
    pub api_pass: Option<String>,
    /// 3DCart Application Private Key
    #[serde(rename = "privateKey", skip_serializing_if = "Option::is_none")]
    pub private_key: Option<String>,
    /// 3DCart Token from Application
    #[serde(rename = "appToken", skip_serializing_if = "Option::is_none")]
    pub app_token: Option<String>,
    /// Etsy keystring
    #[serde(rename = "etsy_keystring", skip_serializing_if = "Option::is_none")]
    pub etsy_keystring: Option<String>,
    /// Etsy shared secret
    #[serde(rename = "etsy_shared_secret", skip_serializing_if = "Option::is_none")]
    pub etsy_shared_secret: Option<String>,
    /// Secret token authorizing the app to access resources on behalf of a user
    #[serde(rename = "tokenSecret", skip_serializing_if = "Option::is_none")]
    pub token_secret: Option<String>,
    /// Etsy Client Id
    #[serde(rename = "etsy_client_id", skip_serializing_if = "Option::is_none")]
    pub etsy_client_id: Option<String>,
    /// Etsy Refresh token
    #[serde(rename = "etsy_refresh_token", skip_serializing_if = "Option::is_none")]
    pub etsy_refresh_token: Option<String>,
    /// Application ID (AppID).
    #[serde(rename = "ebay_client_id", skip_serializing_if = "Option::is_none")]
    pub ebay_client_id: Option<String>,
    /// Shared Secret from eBay application
    #[serde(rename = "ebay_client_secret", skip_serializing_if = "Option::is_none")]
    pub ebay_client_secret: Option<String>,
    /// The RuName value that eBay assigns to your application.
    #[serde(rename = "ebay_runame", skip_serializing_if = "Option::is_none")]
    pub ebay_runame: Option<String>,
    /// Used to authenticate API requests.
    #[serde(rename = "ebay_access_token", skip_serializing_if = "Option::is_none")]
    pub ebay_access_token: Option<String>,
    /// Used to renew the access token.
    #[serde(rename = "ebay_refresh_token", skip_serializing_if = "Option::is_none")]
    pub ebay_refresh_token: Option<String>,
    /// eBay environment
    #[serde(rename = "ebay_environment", skip_serializing_if = "Option::is_none")]
    pub ebay_environment: Option<String>,
    /// eBay global ID
    #[serde(rename = "ebay_site_id", skip_serializing_if = "Option::is_none")]
    pub ebay_site_id: Option<i32>,
    /// Demandware client id
    #[serde(rename = "dw_client_id", skip_serializing_if = "Option::is_none")]
    pub dw_client_id: Option<String>,
    /// Demandware api password
    #[serde(rename = "dw_api_pass", skip_serializing_if = "Option::is_none")]
    pub dw_api_pass: Option<String>,
    /// Demandware user name
    #[serde(rename = "demandware_user_name", skip_serializing_if = "Option::is_none")]
    pub demandware_user_name: Option<String>,
    /// Demandware user password
    #[serde(rename = "demandware_user_password", skip_serializing_if = "Option::is_none")]
    pub demandware_user_password: Option<String>,
    /// Store Id
    #[serde(rename = "store_id")]
    pub store_id: String,
    /// Seller Id
    #[serde(rename = "seller_id", skip_serializing_if = "Option::is_none")]
    pub seller_id: Option<String>,
    /// 
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    /// Omni Commerce Connector Client ID
    #[serde(rename = "hybris_client_id", skip_serializing_if = "Option::is_none")]
    pub hybris_client_id: Option<String>,
    /// Omni Commerce Connector Client Secret
    #[serde(rename = "hybris_client_secret", skip_serializing_if = "Option::is_none")]
    pub hybris_client_secret: Option<String>,
    /// User Name
    #[serde(rename = "hybris_username", skip_serializing_if = "Option::is_none")]
    pub hybris_username: Option<String>,
    /// User password
    #[serde(rename = "hybris_password", skip_serializing_if = "Option::is_none")]
    pub hybris_password: Option<String>,
    /// Websites to stores mapping data
    #[serde(rename = "hybris_websites", skip_serializing_if = "Option::is_none")]
    pub hybris_websites: Option<Vec<models::AccountCartAddHybrisWebsitesInner>>,
    /// Walmart client ID. For the region 'ca' use Consumer ID
    #[serde(rename = "walmart_client_id", skip_serializing_if = "Option::is_none")]
    pub walmart_client_id: Option<String>,
    /// Walmart client secret. For the region 'ca' use Private Key
    #[serde(rename = "walmart_client_secret", skip_serializing_if = "Option::is_none")]
    pub walmart_client_secret: Option<String>,
    /// Walmart environment
    #[serde(rename = "walmart_environment", skip_serializing_if = "Option::is_none")]
    pub walmart_environment: Option<String>,
    /// Walmart WM_CONSUMER.CHANNEL.TYPE header
    #[serde(rename = "walmart_channel_type", skip_serializing_if = "Option::is_none")]
    pub walmart_channel_type: Option<String>,
    /// Walmart region
    #[serde(rename = "walmart_region", skip_serializing_if = "Option::is_none")]
    pub walmart_region: Option<String>,
    /// LightSpeed api key
    #[serde(rename = "lightspeed_api_key", skip_serializing_if = "Option::is_none")]
    pub lightspeed_api_key: Option<String>,
    /// LightSpeed api secret
    #[serde(rename = "lightspeed_api_secret", skip_serializing_if = "Option::is_none")]
    pub lightspeed_api_secret: Option<String>,
    /// Access token authorizing the app to access resources on behalf of a user
    #[serde(rename = "shoplazza_access_token", skip_serializing_if = "Option::is_none")]
    pub shoplazza_access_token: Option<String>,
    /// Shared secret
    #[serde(rename = "shoplazza_shared_secret", skip_serializing_if = "Option::is_none")]
    pub shoplazza_shared_secret: Option<String>,
    /// Shopware access key
    #[serde(rename = "shopware_access_key", skip_serializing_if = "Option::is_none")]
    pub shopware_access_key: Option<String>,
    /// Shopware api key
    #[serde(rename = "shopware_api_key", skip_serializing_if = "Option::is_none")]
    pub shopware_api_key: Option<String>,
    /// Shopware client secret access key
    #[serde(rename = "shopware_api_secret", skip_serializing_if = "Option::is_none")]
    pub shopware_api_secret: Option<String>,
    /// CommerceHQ api key
    #[serde(rename = "commercehq_api_key", skip_serializing_if = "Option::is_none")]
    pub commercehq_api_key: Option<String>,
    /// CommerceHQ api password
    #[serde(rename = "commercehq_api_password", skip_serializing_if = "Option::is_none")]
    pub commercehq_api_password: Option<String>,
    /// 3DCart Private Key
    #[serde(rename = "3dcart_private_key", skip_serializing_if = "Option::is_none")]
    pub param_3dcart_private_key: Option<String>,
    /// 3DCart Token
    #[serde(rename = "3dcart_access_token", skip_serializing_if = "Option::is_none")]
    pub param_3dcart_access_token: Option<String>,
    /// Woocommerce consumer key
    #[serde(rename = "wc_consumer_key", skip_serializing_if = "Option::is_none")]
    pub wc_consumer_key: Option<String>,
    /// Woocommerce consumer secret
    #[serde(rename = "wc_consumer_secret", skip_serializing_if = "Option::is_none")]
    pub wc_consumer_secret: Option<String>,
    /// Magento Consumer Key
    #[serde(rename = "magento_consumer_key", skip_serializing_if = "Option::is_none")]
    pub magento_consumer_key: Option<String>,
    /// Magento Consumer Secret
    #[serde(rename = "magento_consumer_secret", skip_serializing_if = "Option::is_none")]
    pub magento_consumer_secret: Option<String>,
    /// Magento Access Token
    #[serde(rename = "magento_access_token", skip_serializing_if = "Option::is_none")]
    pub magento_access_token: Option<String>,
    /// Magento Token Secret
    #[serde(rename = "magento_token_secret", skip_serializing_if = "Option::is_none")]
    pub magento_token_secret: Option<String>,
    /// Prestashop webservice key
    #[serde(rename = "prestashop_webservice_key", skip_serializing_if = "Option::is_none")]
    pub prestashop_webservice_key: Option<String>,
    /// Wix App ID
    #[serde(rename = "wix_app_id")]
    pub wix_app_id: String,
    /// Wix App Secret Key
    #[serde(rename = "wix_app_secret_key")]
    pub wix_app_secret_key: String,
    /// Wix Instance ID
    #[serde(rename = "wix_instance_id", skip_serializing_if = "Option::is_none")]
    pub wix_instance_id: Option<String>,
    /// Wix refresh token
    #[serde(rename = "wix_refresh_token", skip_serializing_if = "Option::is_none")]
    pub wix_refresh_token: Option<String>,
    /// Mercado Libre App ID
    #[serde(rename = "mercado_libre_app_id", skip_serializing_if = "Option::is_none")]
    pub mercado_libre_app_id: Option<String>,
    /// Mercado Libre App Secret Key
    #[serde(rename = "mercado_libre_app_secret_key", skip_serializing_if = "Option::is_none")]
    pub mercado_libre_app_secret_key: Option<String>,
    /// Mercado Libre Refresh Token
    #[serde(rename = "mercado_libre_refresh_token", skip_serializing_if = "Option::is_none")]
    pub mercado_libre_refresh_token: Option<String>,
    /// Zid Client ID
    #[serde(rename = "zid_client_id", skip_serializing_if = "Option::is_none")]
    pub zid_client_id: Option<i32>,
    /// Zid Client Secret
    #[serde(rename = "zid_client_secret", skip_serializing_if = "Option::is_none")]
    pub zid_client_secret: Option<String>,
    /// Zid Access Token
    #[serde(rename = "zid_access_token", skip_serializing_if = "Option::is_none")]
    pub zid_access_token: Option<String>,
    /// Zid Authorization
    #[serde(rename = "zid_authorization", skip_serializing_if = "Option::is_none")]
    pub zid_authorization: Option<String>,
    /// Zid refresh token
    #[serde(rename = "zid_refresh_token", skip_serializing_if = "Option::is_none")]
    pub zid_refresh_token: Option<String>,
    /// Flipkart Client ID
    #[serde(rename = "flipkart_client_id", skip_serializing_if = "Option::is_none")]
    pub flipkart_client_id: Option<String>,
    /// Flipkart Client Secret
    #[serde(rename = "flipkart_client_secret", skip_serializing_if = "Option::is_none")]
    pub flipkart_client_secret: Option<String>,
    /// Allegro Client ID
    #[serde(rename = "allegro_client_id", skip_serializing_if = "Option::is_none")]
    pub allegro_client_id: Option<String>,
    /// Allegro Client Secret
    #[serde(rename = "allegro_client_secret", skip_serializing_if = "Option::is_none")]
    pub allegro_client_secret: Option<String>,
    /// Allegro Access Token
    #[serde(rename = "allegro_access_token", skip_serializing_if = "Option::is_none")]
    pub allegro_access_token: Option<String>,
    /// Allegro Refresh Token
    #[serde(rename = "allegro_refresh_token", skip_serializing_if = "Option::is_none")]
    pub allegro_refresh_token: Option<String>,
    /// Allegro Environment
    #[serde(rename = "allegro_environment", skip_serializing_if = "Option::is_none")]
    pub allegro_environment: Option<String>,
}

impl CartCreate {
    pub fn new(cart_id: CartId, store_id: String, wix_app_id: String, wix_app_secret_key: String) -> CartCreate {
        CartCreate {
            cart_id,
            store_url: None,
            bridge_url: None,
            store_root: None,
            store_key: None,
            shared_secret: None,
            validate_version: None,
            verify: None,
            db_tables_prefix: None,
            user_agent: None,
            ftp_host: None,
            ftp_user: None,
            ftp_password: None,
            ftp_port: None,
            ftp_store_dir: None,
            api_key_3dcart: None,
            admin_account: None,
            api_path: None,
            api_key_bigcommerce: None,
            client_id: None,
            access_token: None,
            context: None,
            access_token: None,
            api_key_shopify: None,
            api_password: None,
            access_token_shopify: None,
            api_key: None,
            api_username: None,
            encrypted_password: None,
            login: None,
            api_user_adnsf: None,
            api_pass: None,
            private_key: None,
            app_token: None,
            etsy_keystring: None,
            etsy_shared_secret: None,
            token_secret: None,
            etsy_client_id: None,
            etsy_refresh_token: None,
            ebay_client_id: None,
            ebay_client_secret: None,
            ebay_runame: None,
            ebay_access_token: None,
            ebay_refresh_token: None,
            ebay_environment: None,
            ebay_site_id: None,
            dw_client_id: None,
            dw_api_pass: None,
            demandware_user_name: None,
            demandware_user_password: None,
            store_id,
            seller_id: None,
            environment: None,
            hybris_client_id: None,
            hybris_client_secret: None,
            hybris_username: None,
            hybris_password: None,
            hybris_websites: None,
            walmart_client_id: None,
            walmart_client_secret: None,
            walmart_environment: None,
            walmart_channel_type: None,
            walmart_region: None,
            lightspeed_api_key: None,
            lightspeed_api_secret: None,
            shoplazza_access_token: None,
            shoplazza_shared_secret: None,
            shopware_access_key: None,
            shopware_api_key: None,
            shopware_api_secret: None,
            commercehq_api_key: None,
            commercehq_api_password: None,
            param_3dcart_private_key: None,
            param_3dcart_access_token: None,
            wc_consumer_key: None,
            wc_consumer_secret: None,
            magento_consumer_key: None,
            magento_consumer_secret: None,
            magento_access_token: None,
            magento_token_secret: None,
            prestashop_webservice_key: None,
            wix_app_id,
            wix_app_secret_key,
            wix_instance_id: None,
            wix_refresh_token: None,
            mercado_libre_app_id: None,
            mercado_libre_app_secret_key: None,
            mercado_libre_refresh_token: None,
            zid_client_id: None,
            zid_client_secret: None,
            zid_access_token: None,
            zid_authorization: None,
            zid_refresh_token: None,
            flipkart_client_id: None,
            flipkart_client_secret: None,
            allegro_client_id: None,
            allegro_client_secret: None,
            allegro_access_token: None,
            allegro_refresh_token: None,
            allegro_environment: None,
        }
    }
}
/// Storeâ€™s identifier which you can get from cart_list method
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CartId {
    #[serde(rename = "3DCart")]
    Variant3DCart,
    #[serde(rename = "3DCartApi")]
    Variant3DCartApi,
    #[serde(rename = "AceShop")]
    AceShop,
    #[serde(rename = "AmazonSP")]
    AmazonSp,
    #[serde(rename = "AspDotNetStorefront")]
    AspDotNetStorefront,
    #[serde(rename = "BigCartel")]
    BigCartel,
    #[serde(rename = "BigcommerceApi")]
    BigcommerceApi,
    #[serde(rename = "Bol")]
    Bol,
    #[serde(rename = "CommerceHQ")]
    CommerceHq,
    #[serde(rename = "Creloaded")]
    Creloaded,
    #[serde(rename = "Cscart")]
    Cscart,
    #[serde(rename = "Cubecart")]
    Cubecart,
    #[serde(rename = "Demandware")]
    Demandware,
    #[serde(rename = "EBay")]
    EBay,
    #[serde(rename = "Ecwid")]
    Ecwid,
    #[serde(rename = "EtsyAPIv3")]
    EtsyApiv3,
    #[serde(rename = "Flipkart")]
    Flipkart,
    #[serde(rename = "Gambio")]
    Gambio,
    #[serde(rename = "Hybris")]
    Hybris,
    #[serde(rename = "JooCart")]
    JooCart,
    #[serde(rename = "Lazada")]
    Lazada,
    #[serde(rename = "LightSpeed")]
    LightSpeed,
    #[serde(rename = "Magento1212")]
    Magento1212,
    #[serde(rename = "Magento2Api")]
    Magento2Api,
    #[serde(rename = "MercadoLibre")]
    MercadoLibre,
    #[serde(rename = "MijoShop")]
    MijoShop,
    #[serde(rename = "Miva")]
    Miva,
    #[serde(rename = "Neto")]
    Neto,
    #[serde(rename = "Opencart14")]
    Opencart14,
    #[serde(rename = "Oscmax2")]
    Oscmax2,
    #[serde(rename = "Oscommerce22ms2")]
    Oscommerce22ms2,
    #[serde(rename = "Otto")]
    Otto,
    #[serde(rename = "Oxid")]
    Oxid,
    #[serde(rename = "Pinnacle")]
    Pinnacle,
    #[serde(rename = "Prestashop")]
    Prestashop,
    #[serde(rename = "PrestashopApi")]
    PrestashopApi,
    #[serde(rename = "SSPremium")]
    SsPremium,
    #[serde(rename = "Salla")]
    Salla,
    #[serde(rename = "Shopify")]
    Shopify,
    #[serde(rename = "Shoplazza")]
    Shoplazza,
    #[serde(rename = "Shopline")]
    Shopline,
    #[serde(rename = "Shopware")]
    Shopware,
    #[serde(rename = "ShopwareApi")]
    ShopwareApi,
    #[serde(rename = "Square")]
    Square,
    #[serde(rename = "Squarespace")]
    Squarespace,
    #[serde(rename = "Tiendanube")]
    Tiendanube,
    #[serde(rename = "TikTokShop")]
    TikTokShop,
    #[serde(rename = "Tomatocart")]
    Tomatocart,
    #[serde(rename = "Ubercart")]
    Ubercart,
    #[serde(rename = "Virtuemart")]
    Virtuemart,
    #[serde(rename = "Volusion")]
    Volusion,
    #[serde(rename = "WPecommerce")]
    WPecommerce,
    #[serde(rename = "Walmart")]
    Walmart,
    #[serde(rename = "WebAsyst")]
    WebAsyst,
    #[serde(rename = "Wix")]
    Wix,
    #[serde(rename = "Woocommerce")]
    Woocommerce,
    #[serde(rename = "WoocommerceApi")]
    WoocommerceApi,
    #[serde(rename = "Xcart")]
    Xcart,
    #[serde(rename = "Xtcommerce")]
    Xtcommerce,
    #[serde(rename = "XtcommerceVeyton")]
    XtcommerceVeyton,
    #[serde(rename = "Zencart137")]
    Zencart137,
    #[serde(rename = "Zid")]
    Zid,
    #[serde(rename = "Zoey")]
    Zoey,
    #[serde(rename = "Zoho")]
    Zoho,
}

impl Default for CartId {
    fn default() -> CartId {
        Self::Variant3DCart
    }
}

