/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProductAddBatch {
    ///  Determines how updates to nested items should be handled.<hr><div style=\"font-style:normal\">  Values description:  <div style=\"margin-left: 2%; padding-top: 2%\">    <div style=\"font-size:85%\">      <b>  replace</b>: This option indicates that the nested items should be completely replaced with the new data provided. </br>      <b>  merge</b>: With this option, updates to nested items are merged with the existing data. </br>    </div>  </div></div>
    #[serde(rename = "nested_items_update_behaviour", skip_serializing_if = "Option::is_none")]
    pub nested_items_update_behaviour: Option<NestedItemsUpdateBehaviour>,
    #[serde(rename = "clear_cache", skip_serializing_if = "Option::is_none")]
    pub clear_cache: Option<bool>,
    #[serde(rename = "reindex", skip_serializing_if = "Option::is_none")]
    pub reindex: Option<bool>,
    /// Contains an array of product objects. The list of properties may vary depending on the specific platform.
    #[serde(rename = "payload")]
    pub payload: Vec<models::ProductAddBatchPayloadInner>,
}

impl ProductAddBatch {
    pub fn new(payload: Vec<models::ProductAddBatchPayloadInner>) -> ProductAddBatch {
        ProductAddBatch {
            nested_items_update_behaviour: None,
            clear_cache: None,
            reindex: None,
            payload,
        }
    }
}
///  Determines how updates to nested items should be handled.<hr><div style=\"font-style:normal\">  Values description:  <div style=\"margin-left: 2%; padding-top: 2%\">    <div style=\"font-size:85%\">      <b>  replace</b>: This option indicates that the nested items should be completely replaced with the new data provided. </br>      <b>  merge</b>: With this option, updates to nested items are merged with the existing data. </br>    </div>  </div></div>
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NestedItemsUpdateBehaviour {
    #[serde(rename = "replace")]
    Replace,
    #[serde(rename = "merge")]
    Merge,
}

impl Default for NestedItemsUpdateBehaviour {
    fn default() -> NestedItemsUpdateBehaviour {
        Self::Replace
    }
}

