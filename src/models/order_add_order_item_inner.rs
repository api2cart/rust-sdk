/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderAddOrderItemInner {
    /// Defines orders specified by order item id
    #[serde(rename = "order_item_id")]
    pub order_item_id: String,
    /// Defines orders specified by order item name
    #[serde(rename = "order_item_name")]
    pub order_item_name: String,
    /// Defines orders specified by order item model
    #[serde(rename = "order_item_model", skip_serializing_if = "Option::is_none")]
    pub order_item_model: Option<String>,
    /// Defines orders specified by order item price
    #[serde(rename = "order_item_price")]
    pub order_item_price: f64,
    /// Defines orders specified by order item quantity
    #[serde(rename = "order_item_quantity")]
    pub order_item_quantity: i32,
    /// Defines orders specified by order item weight
    #[serde(rename = "order_item_weight", skip_serializing_if = "Option::is_none")]
    pub order_item_weight: Option<f64>,
    /// Ordered product variant. Where x is order item ID
    #[serde(rename = "order_item_variant_id", skip_serializing_if = "Option::is_none")]
    pub order_item_variant_id: Option<String>,
    /// Percentage of tax for product order
    #[serde(rename = "order_item_tax", skip_serializing_if = "Option::is_none")]
    pub order_item_tax: Option<f64>,
    /// Id of the tax class of product.
    #[serde(rename = "order_item_tax_class", skip_serializing_if = "Option::is_none")]
    pub order_item_tax_class: Option<String>,
    /// Defines if item price includes tax
    #[serde(rename = "order_item_price_includes_tax", skip_serializing_if = "Option::is_none")]
    pub order_item_price_includes_tax: Option<bool>,
    /// Index of the parent grouped/bundle product
    #[serde(rename = "order_item_parent", skip_serializing_if = "Option::is_none")]
    pub order_item_parent: Option<i32>,
    /// Option name of the parent grouped/bundle product
    #[serde(rename = "order_item_parent_option_name", skip_serializing_if = "Option::is_none")]
    pub order_item_parent_option_name: Option<String>,
    /// Indicates whether subitems of the grouped/bundle product can be refunded separately
    #[serde(rename = "order_item_allow_refund_items_separately", skip_serializing_if = "Option::is_none")]
    pub order_item_allow_refund_items_separately: Option<bool>,
    /// Indicates whether subitems of the grouped/bundle product can be shipped separately
    #[serde(rename = "order_item_allow_ship_items_separately", skip_serializing_if = "Option::is_none")]
    pub order_item_allow_ship_items_separately: Option<bool>,
    #[serde(rename = "order_item_option", skip_serializing_if = "Option::is_none")]
    pub order_item_option: Option<Vec<models::OrderAddOrderItemInnerOrderItemOptionInner>>,
    #[serde(rename = "order_item_property", skip_serializing_if = "Option::is_none")]
    pub order_item_property: Option<Vec<models::OrderAddOrderItemInnerOrderItemPropertyInner>>,
}

impl OrderAddOrderItemInner {
    pub fn new(order_item_id: String, order_item_name: String, order_item_price: f64, order_item_quantity: i32) -> OrderAddOrderItemInner {
        OrderAddOrderItemInner {
            order_item_id,
            order_item_name,
            order_item_model: None,
            order_item_price,
            order_item_quantity,
            order_item_weight: None,
            order_item_variant_id: None,
            order_item_tax: None,
            order_item_tax_class: None,
            order_item_price_includes_tax: None,
            order_item_parent: None,
            order_item_parent_option_name: None,
            order_item_allow_refund_items_separately: None,
            order_item_allow_ship_items_separately: None,
            order_item_option: None,
            order_item_property: None,
        }
    }
}

