/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderShipmentUpdate {
    /// Shipment id indicates the number of delivery
    #[serde(rename = "shipment_id")]
    pub shipment_id: String,
    /// Defines the order that will be updated
    #[serde(rename = "order_id", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<String>,
    /// Store Id
    #[serde(rename = "store_id", skip_serializing_if = "Option::is_none")]
    pub store_id: Option<String>,
    /// Defines company name that provide tracking of shipment
    #[serde(rename = "shipment_provider", skip_serializing_if = "Option::is_none")]
    pub shipment_provider: Option<String>,
    /// Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method
    #[serde(rename = "tracking_numbers", skip_serializing_if = "Option::is_none")]
    pub tracking_numbers: Option<Vec<models::OrderShipmentAddTrackingNumbersInner>>,
    /// Defines custom tracking link
    #[serde(rename = "tracking_link", skip_serializing_if = "Option::is_none")]
    pub tracking_link: Option<String>,
    /// Defines shipment's status
    #[serde(rename = "is_shipped", skip_serializing_if = "Option::is_none")]
    pub is_shipped: Option<bool>,
    /// Defines the date of delivery
    #[serde(rename = "delivered_at", skip_serializing_if = "Option::is_none")]
    pub delivered_at: Option<String>,
    /// Allows rewrite tracking numbers
    #[serde(rename = "replace", skip_serializing_if = "Option::is_none")]
    pub replace: Option<bool>,
    /// Send notifications to customer after order was created
    #[serde(rename = "send_notifications", skip_serializing_if = "Option::is_none")]
    pub send_notifications: Option<bool>,
    /// Defines name of the company which provides shipment tracking
    #[serde(rename = "tracking_provider", skip_serializing_if = "Option::is_none")]
    pub tracking_provider: Option<String>,
    /// Defines items in the order that will be shipped
    #[serde(rename = "items", skip_serializing_if = "Option::is_none")]
    pub items: Option<Vec<models::OrderShipmentAddItemsInner>>,
}

impl OrderShipmentUpdate {
    pub fn new(shipment_id: String) -> OrderShipmentUpdate {
        OrderShipmentUpdate {
            shipment_id,
            order_id: None,
            store_id: None,
            shipment_provider: None,
            tracking_numbers: None,
            tracking_link: None,
            is_shipped: None,
            delivered_at: None,
            replace: None,
            send_notifications: None,
            tracking_provider: None,
            items: None,
        }
    }
}

