/*
 * API2Cart OpenAPI
 *
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`account_cart_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountCartAddError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_cart_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountCartListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_config_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountConfigUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_failed_webhooks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountFailedWebhooksError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`account_supported_platforms`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountSupportedPlatformsError {
    UnknownValue(serde_json::Value),
}


/// Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
pub async fn account_cart_add(configuration: &configuration::Configuration, account_cart_add: models::AccountCartAdd) -> Result<models::AccountCartAdd200Response, Error<AccountCartAddError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_account_cart_add = account_cart_add;

    let uri_str = format!("{}/account.cart.add.json", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };
    req_builder = req_builder.json(&p_account_cart_add);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountCartAddError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
pub async fn account_cart_list(configuration: &configuration::Configuration, store_url: Option<&str>, store_key: Option<&str>, request_from_date: Option<&str>, request_to_date: Option<&str>, params: Option<&str>, exclude: Option<&str>) -> Result<models::AccountCartList200Response, Error<AccountCartListError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_store_url = store_url;
    let p_store_key = store_key;
    let p_request_from_date = request_from_date;
    let p_request_to_date = request_to_date;
    let p_params = params;
    let p_exclude = exclude;

    let uri_str = format!("{}/account.cart.list.json", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_store_url {
        req_builder = req_builder.query(&[("store_url", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_store_key {
        req_builder = req_builder.query(&[("store_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_request_from_date {
        req_builder = req_builder.query(&[("request_from_date", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_request_to_date {
        req_builder = req_builder.query(&[("request_to_date", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_params {
        req_builder = req_builder.query(&[("params", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_exclude {
        req_builder = req_builder.query(&[("exclude", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountCartListError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
pub async fn account_config_update(configuration: &configuration::Configuration, replace_parameters: Option<bool>, new_store_url: Option<&str>, new_store_key: Option<&str>, bridge_url: Option<&str>, store_root: Option<&str>, db_tables_prefix: Option<&str>, user_agent: Option<&str>, param_3dcart_private_key: Option<&str>, param_3dcart_access_token: Option<&str>, param_3dcartapi_api_key: Option<&str>, amazon_sp_client_id: Option<&str>, amazon_sp_client_secret: Option<&str>, amazon_sp_refresh_token: Option<&str>, amazon_sp_aws_region: Option<&str>, amazon_sp_api_environment: Option<&str>, amazon_seller_id: Option<&str>, aspdotnetstorefront_api_user: Option<&str>, aspdotnetstorefront_api_pass: Option<&str>, bigcommerceapi_admin_account: Option<&str>, bigcommerceapi_api_path: Option<&str>, bigcommerceapi_api_key: Option<&str>, bigcommerceapi_client_id: Option<&str>, bigcommerceapi_access_token: Option<&str>, bigcommerceapi_context: Option<&str>, bol_api_key: Option<&str>, bol_api_secret: Option<&str>, bol_retailer_id: Option<i32>, demandware_client_id: Option<&str>, demandware_api_password: Option<&str>, demandware_user_name: Option<&str>, demandware_user_password: Option<&str>, ebay_client_id: Option<&str>, ebay_client_secret: Option<&str>, ebay_runame: Option<&str>, ebay_access_token: Option<&str>, ebay_refresh_token: Option<&str>, ebay_environment: Option<&str>, ebay_site_id: Option<i32>, ecwid_acess_token: Option<&str>, ecwid_store_id: Option<&str>, lazada_app_id: Option<&str>, lazada_app_secret: Option<&str>, lazada_refresh_token: Option<&str>, lazada_region: Option<&str>, etsy_keystring: Option<&str>, etsy_shared_secret: Option<&str>, etsy_access_token: Option<&str>, etsy_token_secret: Option<&str>, etsy_client_id: Option<&str>, etsy_refresh_token: Option<&str>, facebook_app_id: Option<&str>, facebook_app_secret: Option<&str>, facebook_access_token: Option<&str>, facebook_business_id: Option<&str>, neto_api_key: Option<&str>, neto_api_username: Option<&str>, shopline_access_token: Option<&str>, shopline_app_key: Option<&str>, shopline_app_secret: Option<&str>, shopline_shared_secret: Option<&str>, shopify_access_token: Option<&str>, shopify_api_key: Option<&str>, shopify_api_password: Option<&str>, shopify_shared_secret: Option<&str>, shoplazza_access_token: Option<&str>, shoplazza_shared_secret: Option<&str>, miva_access_token: Option<&str>, miva_signature: Option<&str>, shopware_access_key: Option<&str>, shopware_api_key: Option<&str>, shopware_api_secret: Option<&str>, bigcartel_user_name: Option<&str>, bigcartel_password: Option<&str>, volusion_login: Option<&str>, volusion_password: Option<&str>, walmart_client_id: Option<&str>, walmart_client_secret: Option<&str>, walmart_environment: Option<&str>, walmart_channel_type: Option<&str>, walmart_region: Option<&str>, square_client_id: Option<&str>, square_client_secret: Option<&str>, square_refresh_token: Option<&str>, squarespace_api_key: Option<&str>, squarespace_client_id: Option<&str>, squarespace_client_secret: Option<&str>, squarespace_access_token: Option<&str>, squarespace_refresh_token: Option<&str>, hybris_client_id: Option<&str>, hybris_client_secret: Option<&str>, hybris_username: Option<&str>, hybris_password: Option<&str>, hybris_websites: Option<Vec<String>>, lightspeed_api_key: Option<&str>, lightspeed_api_secret: Option<&str>, commercehq_api_key: Option<&str>, commercehq_api_password: Option<&str>, wc_consumer_key: Option<&str>, wc_consumer_secret: Option<&str>, magento_consumer_key: Option<&str>, magento_consumer_secret: Option<&str>, magento_access_token: Option<&str>, magento_token_secret: Option<&str>, prestashop_webservice_key: Option<&str>, wix_app_id: Option<&str>, wix_app_secret_key: Option<&str>, wix_instance_id: Option<&str>, wix_refresh_token: Option<&str>, mercado_libre_app_id: Option<&str>, mercado_libre_app_secret_key: Option<&str>, mercado_libre_refresh_token: Option<&str>, zid_client_id: Option<i32>, zid_client_secret: Option<&str>, zid_access_token: Option<&str>, zid_authorization: Option<&str>, zid_refresh_token: Option<&str>, flipkart_client_id: Option<&str>, flipkart_client_secret: Option<&str>, allegro_client_id: Option<&str>, allegro_client_secret: Option<&str>, allegro_access_token: Option<&str>, allegro_refresh_token: Option<&str>, allegro_environment: Option<&str>, zoho_client_id: Option<&str>, zoho_client_secret: Option<&str>, zoho_refresh_token: Option<&str>, zoho_region: Option<&str>, tiendanube_user_id: Option<i32>, tiendanube_access_token: Option<&str>, tiendanube_client_secret: Option<&str>, otto_client_id: Option<&str>, otto_client_secret: Option<&str>, otto_app_id: Option<&str>, otto_refresh_token: Option<&str>, otto_environment: Option<&str>, otto_access_token: Option<&str>, tiktokshop_app_key: Option<&str>, tiktokshop_app_secret: Option<&str>, tiktokshop_refresh_token: Option<&str>, tiktokshop_access_token: Option<&str>, salla_client_id: Option<&str>, salla_client_secret: Option<&str>, salla_refresh_token: Option<&str>, salla_access_token: Option<&str>) -> Result<models::AccountConfigUpdate200Response, Error<AccountConfigUpdateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_replace_parameters = replace_parameters;
    let p_new_store_url = new_store_url;
    let p_new_store_key = new_store_key;
    let p_bridge_url = bridge_url;
    let p_store_root = store_root;
    let p_db_tables_prefix = db_tables_prefix;
    let p_user_agent = user_agent;
    let p_param_3dcart_private_key = param_3dcart_private_key;
    let p_param_3dcart_access_token = param_3dcart_access_token;
    let p_param_3dcartapi_api_key = param_3dcartapi_api_key;
    let p_amazon_sp_client_id = amazon_sp_client_id;
    let p_amazon_sp_client_secret = amazon_sp_client_secret;
    let p_amazon_sp_refresh_token = amazon_sp_refresh_token;
    let p_amazon_sp_aws_region = amazon_sp_aws_region;
    let p_amazon_sp_api_environment = amazon_sp_api_environment;
    let p_amazon_seller_id = amazon_seller_id;
    let p_aspdotnetstorefront_api_user = aspdotnetstorefront_api_user;
    let p_aspdotnetstorefront_api_pass = aspdotnetstorefront_api_pass;
    let p_bigcommerceapi_admin_account = bigcommerceapi_admin_account;
    let p_bigcommerceapi_api_path = bigcommerceapi_api_path;
    let p_bigcommerceapi_api_key = bigcommerceapi_api_key;
    let p_bigcommerceapi_client_id = bigcommerceapi_client_id;
    let p_bigcommerceapi_access_token = bigcommerceapi_access_token;
    let p_bigcommerceapi_context = bigcommerceapi_context;
    let p_bol_api_key = bol_api_key;
    let p_bol_api_secret = bol_api_secret;
    let p_bol_retailer_id = bol_retailer_id;
    let p_demandware_client_id = demandware_client_id;
    let p_demandware_api_password = demandware_api_password;
    let p_demandware_user_name = demandware_user_name;
    let p_demandware_user_password = demandware_user_password;
    let p_ebay_client_id = ebay_client_id;
    let p_ebay_client_secret = ebay_client_secret;
    let p_ebay_runame = ebay_runame;
    let p_ebay_access_token = ebay_access_token;
    let p_ebay_refresh_token = ebay_refresh_token;
    let p_ebay_environment = ebay_environment;
    let p_ebay_site_id = ebay_site_id;
    let p_ecwid_acess_token = ecwid_acess_token;
    let p_ecwid_store_id = ecwid_store_id;
    let p_lazada_app_id = lazada_app_id;
    let p_lazada_app_secret = lazada_app_secret;
    let p_lazada_refresh_token = lazada_refresh_token;
    let p_lazada_region = lazada_region;
    let p_etsy_keystring = etsy_keystring;
    let p_etsy_shared_secret = etsy_shared_secret;
    let p_etsy_access_token = etsy_access_token;
    let p_etsy_token_secret = etsy_token_secret;
    let p_etsy_client_id = etsy_client_id;
    let p_etsy_refresh_token = etsy_refresh_token;
    let p_facebook_app_id = facebook_app_id;
    let p_facebook_app_secret = facebook_app_secret;
    let p_facebook_access_token = facebook_access_token;
    let p_facebook_business_id = facebook_business_id;
    let p_neto_api_key = neto_api_key;
    let p_neto_api_username = neto_api_username;
    let p_shopline_access_token = shopline_access_token;
    let p_shopline_app_key = shopline_app_key;
    let p_shopline_app_secret = shopline_app_secret;
    let p_shopline_shared_secret = shopline_shared_secret;
    let p_shopify_access_token = shopify_access_token;
    let p_shopify_api_key = shopify_api_key;
    let p_shopify_api_password = shopify_api_password;
    let p_shopify_shared_secret = shopify_shared_secret;
    let p_shoplazza_access_token = shoplazza_access_token;
    let p_shoplazza_shared_secret = shoplazza_shared_secret;
    let p_miva_access_token = miva_access_token;
    let p_miva_signature = miva_signature;
    let p_shopware_access_key = shopware_access_key;
    let p_shopware_api_key = shopware_api_key;
    let p_shopware_api_secret = shopware_api_secret;
    let p_bigcartel_user_name = bigcartel_user_name;
    let p_bigcartel_password = bigcartel_password;
    let p_volusion_login = volusion_login;
    let p_volusion_password = volusion_password;
    let p_walmart_client_id = walmart_client_id;
    let p_walmart_client_secret = walmart_client_secret;
    let p_walmart_environment = walmart_environment;
    let p_walmart_channel_type = walmart_channel_type;
    let p_walmart_region = walmart_region;
    let p_square_client_id = square_client_id;
    let p_square_client_secret = square_client_secret;
    let p_square_refresh_token = square_refresh_token;
    let p_squarespace_api_key = squarespace_api_key;
    let p_squarespace_client_id = squarespace_client_id;
    let p_squarespace_client_secret = squarespace_client_secret;
    let p_squarespace_access_token = squarespace_access_token;
    let p_squarespace_refresh_token = squarespace_refresh_token;
    let p_hybris_client_id = hybris_client_id;
    let p_hybris_client_secret = hybris_client_secret;
    let p_hybris_username = hybris_username;
    let p_hybris_password = hybris_password;
    let p_hybris_websites = hybris_websites;
    let p_lightspeed_api_key = lightspeed_api_key;
    let p_lightspeed_api_secret = lightspeed_api_secret;
    let p_commercehq_api_key = commercehq_api_key;
    let p_commercehq_api_password = commercehq_api_password;
    let p_wc_consumer_key = wc_consumer_key;
    let p_wc_consumer_secret = wc_consumer_secret;
    let p_magento_consumer_key = magento_consumer_key;
    let p_magento_consumer_secret = magento_consumer_secret;
    let p_magento_access_token = magento_access_token;
    let p_magento_token_secret = magento_token_secret;
    let p_prestashop_webservice_key = prestashop_webservice_key;
    let p_wix_app_id = wix_app_id;
    let p_wix_app_secret_key = wix_app_secret_key;
    let p_wix_instance_id = wix_instance_id;
    let p_wix_refresh_token = wix_refresh_token;
    let p_mercado_libre_app_id = mercado_libre_app_id;
    let p_mercado_libre_app_secret_key = mercado_libre_app_secret_key;
    let p_mercado_libre_refresh_token = mercado_libre_refresh_token;
    let p_zid_client_id = zid_client_id;
    let p_zid_client_secret = zid_client_secret;
    let p_zid_access_token = zid_access_token;
    let p_zid_authorization = zid_authorization;
    let p_zid_refresh_token = zid_refresh_token;
    let p_flipkart_client_id = flipkart_client_id;
    let p_flipkart_client_secret = flipkart_client_secret;
    let p_allegro_client_id = allegro_client_id;
    let p_allegro_client_secret = allegro_client_secret;
    let p_allegro_access_token = allegro_access_token;
    let p_allegro_refresh_token = allegro_refresh_token;
    let p_allegro_environment = allegro_environment;
    let p_zoho_client_id = zoho_client_id;
    let p_zoho_client_secret = zoho_client_secret;
    let p_zoho_refresh_token = zoho_refresh_token;
    let p_zoho_region = zoho_region;
    let p_tiendanube_user_id = tiendanube_user_id;
    let p_tiendanube_access_token = tiendanube_access_token;
    let p_tiendanube_client_secret = tiendanube_client_secret;
    let p_otto_client_id = otto_client_id;
    let p_otto_client_secret = otto_client_secret;
    let p_otto_app_id = otto_app_id;
    let p_otto_refresh_token = otto_refresh_token;
    let p_otto_environment = otto_environment;
    let p_otto_access_token = otto_access_token;
    let p_tiktokshop_app_key = tiktokshop_app_key;
    let p_tiktokshop_app_secret = tiktokshop_app_secret;
    let p_tiktokshop_refresh_token = tiktokshop_refresh_token;
    let p_tiktokshop_access_token = tiktokshop_access_token;
    let p_salla_client_id = salla_client_id;
    let p_salla_client_secret = salla_client_secret;
    let p_salla_refresh_token = salla_refresh_token;
    let p_salla_access_token = salla_access_token;

    let uri_str = format!("{}/account.config.update.json", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_replace_parameters {
        req_builder = req_builder.query(&[("replace_parameters", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_new_store_url {
        req_builder = req_builder.query(&[("new_store_url", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_new_store_key {
        req_builder = req_builder.query(&[("new_store_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bridge_url {
        req_builder = req_builder.query(&[("bridge_url", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_store_root {
        req_builder = req_builder.query(&[("store_root", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_db_tables_prefix {
        req_builder = req_builder.query(&[("db_tables_prefix", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_user_agent {
        req_builder = req_builder.query(&[("user_agent", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_param_3dcart_private_key {
        req_builder = req_builder.query(&[("3dcart_private_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_param_3dcart_access_token {
        req_builder = req_builder.query(&[("3dcart_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_param_3dcartapi_api_key {
        req_builder = req_builder.query(&[("3dcartapi_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_sp_client_id {
        req_builder = req_builder.query(&[("amazon_sp_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_sp_client_secret {
        req_builder = req_builder.query(&[("amazon_sp_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_sp_refresh_token {
        req_builder = req_builder.query(&[("amazon_sp_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_sp_aws_region {
        req_builder = req_builder.query(&[("amazon_sp_aws_region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_sp_api_environment {
        req_builder = req_builder.query(&[("amazon_sp_api_environment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_amazon_seller_id {
        req_builder = req_builder.query(&[("amazon_seller_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_aspdotnetstorefront_api_user {
        req_builder = req_builder.query(&[("aspdotnetstorefront_api_user", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_aspdotnetstorefront_api_pass {
        req_builder = req_builder.query(&[("aspdotnetstorefront_api_pass", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_admin_account {
        req_builder = req_builder.query(&[("bigcommerceapi_admin_account", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_api_path {
        req_builder = req_builder.query(&[("bigcommerceapi_api_path", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_api_key {
        req_builder = req_builder.query(&[("bigcommerceapi_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_client_id {
        req_builder = req_builder.query(&[("bigcommerceapi_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_access_token {
        req_builder = req_builder.query(&[("bigcommerceapi_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcommerceapi_context {
        req_builder = req_builder.query(&[("bigcommerceapi_context", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bol_api_key {
        req_builder = req_builder.query(&[("bol_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bol_api_secret {
        req_builder = req_builder.query(&[("bol_api_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bol_retailer_id {
        req_builder = req_builder.query(&[("bol_retailer_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_demandware_client_id {
        req_builder = req_builder.query(&[("demandware_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_demandware_api_password {
        req_builder = req_builder.query(&[("demandware_api_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_demandware_user_name {
        req_builder = req_builder.query(&[("demandware_user_name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_demandware_user_password {
        req_builder = req_builder.query(&[("demandware_user_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_client_id {
        req_builder = req_builder.query(&[("ebay_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_client_secret {
        req_builder = req_builder.query(&[("ebay_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_runame {
        req_builder = req_builder.query(&[("ebay_runame", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_access_token {
        req_builder = req_builder.query(&[("ebay_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_refresh_token {
        req_builder = req_builder.query(&[("ebay_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_environment {
        req_builder = req_builder.query(&[("ebay_environment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ebay_site_id {
        req_builder = req_builder.query(&[("ebay_site_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ecwid_acess_token {
        req_builder = req_builder.query(&[("ecwid_acess_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ecwid_store_id {
        req_builder = req_builder.query(&[("ecwid_store_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_lazada_app_id {
        req_builder = req_builder.query(&[("lazada_app_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_lazada_app_secret {
        req_builder = req_builder.query(&[("lazada_app_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_lazada_refresh_token {
        req_builder = req_builder.query(&[("lazada_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_lazada_region {
        req_builder = req_builder.query(&[("lazada_region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_keystring {
        req_builder = req_builder.query(&[("etsy_keystring", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_shared_secret {
        req_builder = req_builder.query(&[("etsy_shared_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_access_token {
        req_builder = req_builder.query(&[("etsy_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_token_secret {
        req_builder = req_builder.query(&[("etsy_token_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_client_id {
        req_builder = req_builder.query(&[("etsy_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_etsy_refresh_token {
        req_builder = req_builder.query(&[("etsy_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_facebook_app_id {
        req_builder = req_builder.query(&[("facebook_app_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_facebook_app_secret {
        req_builder = req_builder.query(&[("facebook_app_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_facebook_access_token {
        req_builder = req_builder.query(&[("facebook_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_facebook_business_id {
        req_builder = req_builder.query(&[("facebook_business_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_neto_api_key {
        req_builder = req_builder.query(&[("neto_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_neto_api_username {
        req_builder = req_builder.query(&[("neto_api_username", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopline_access_token {
        req_builder = req_builder.query(&[("shopline_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopline_app_key {
        req_builder = req_builder.query(&[("shopline_app_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopline_app_secret {
        req_builder = req_builder.query(&[("shopline_app_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopline_shared_secret {
        req_builder = req_builder.query(&[("shopline_shared_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopify_access_token {
        req_builder = req_builder.query(&[("shopify_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopify_api_key {
        req_builder = req_builder.query(&[("shopify_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopify_api_password {
        req_builder = req_builder.query(&[("shopify_api_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopify_shared_secret {
        req_builder = req_builder.query(&[("shopify_shared_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shoplazza_access_token {
        req_builder = req_builder.query(&[("shoplazza_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shoplazza_shared_secret {
        req_builder = req_builder.query(&[("shoplazza_shared_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_miva_access_token {
        req_builder = req_builder.query(&[("miva_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_miva_signature {
        req_builder = req_builder.query(&[("miva_signature", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopware_access_key {
        req_builder = req_builder.query(&[("shopware_access_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopware_api_key {
        req_builder = req_builder.query(&[("shopware_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_shopware_api_secret {
        req_builder = req_builder.query(&[("shopware_api_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcartel_user_name {
        req_builder = req_builder.query(&[("bigcartel_user_name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_bigcartel_password {
        req_builder = req_builder.query(&[("bigcartel_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_volusion_login {
        req_builder = req_builder.query(&[("volusion_login", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_volusion_password {
        req_builder = req_builder.query(&[("volusion_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_walmart_client_id {
        req_builder = req_builder.query(&[("walmart_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_walmart_client_secret {
        req_builder = req_builder.query(&[("walmart_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_walmart_environment {
        req_builder = req_builder.query(&[("walmart_environment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_walmart_channel_type {
        req_builder = req_builder.query(&[("walmart_channel_type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_walmart_region {
        req_builder = req_builder.query(&[("walmart_region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_square_client_id {
        req_builder = req_builder.query(&[("square_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_square_client_secret {
        req_builder = req_builder.query(&[("square_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_square_refresh_token {
        req_builder = req_builder.query(&[("square_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squarespace_api_key {
        req_builder = req_builder.query(&[("squarespace_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squarespace_client_id {
        req_builder = req_builder.query(&[("squarespace_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squarespace_client_secret {
        req_builder = req_builder.query(&[("squarespace_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squarespace_access_token {
        req_builder = req_builder.query(&[("squarespace_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_squarespace_refresh_token {
        req_builder = req_builder.query(&[("squarespace_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_hybris_client_id {
        req_builder = req_builder.query(&[("hybris_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_hybris_client_secret {
        req_builder = req_builder.query(&[("hybris_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_hybris_username {
        req_builder = req_builder.query(&[("hybris_username", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_hybris_password {
        req_builder = req_builder.query(&[("hybris_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_hybris_websites {
        req_builder = match "multi" {
            "multi" => req_builder.query(&param_value.into_iter().map(|p| ("hybris_websites".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => req_builder.query(&[("hybris_websites", &param_value.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref param_value) = p_lightspeed_api_key {
        req_builder = req_builder.query(&[("lightspeed_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_lightspeed_api_secret {
        req_builder = req_builder.query(&[("lightspeed_api_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_commercehq_api_key {
        req_builder = req_builder.query(&[("commercehq_api_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_commercehq_api_password {
        req_builder = req_builder.query(&[("commercehq_api_password", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wc_consumer_key {
        req_builder = req_builder.query(&[("wc_consumer_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wc_consumer_secret {
        req_builder = req_builder.query(&[("wc_consumer_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_magento_consumer_key {
        req_builder = req_builder.query(&[("magento_consumer_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_magento_consumer_secret {
        req_builder = req_builder.query(&[("magento_consumer_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_magento_access_token {
        req_builder = req_builder.query(&[("magento_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_magento_token_secret {
        req_builder = req_builder.query(&[("magento_token_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_prestashop_webservice_key {
        req_builder = req_builder.query(&[("prestashop_webservice_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wix_app_id {
        req_builder = req_builder.query(&[("wix_app_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wix_app_secret_key {
        req_builder = req_builder.query(&[("wix_app_secret_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wix_instance_id {
        req_builder = req_builder.query(&[("wix_instance_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_wix_refresh_token {
        req_builder = req_builder.query(&[("wix_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_mercado_libre_app_id {
        req_builder = req_builder.query(&[("mercado_libre_app_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_mercado_libre_app_secret_key {
        req_builder = req_builder.query(&[("mercado_libre_app_secret_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_mercado_libre_refresh_token {
        req_builder = req_builder.query(&[("mercado_libre_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zid_client_id {
        req_builder = req_builder.query(&[("zid_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zid_client_secret {
        req_builder = req_builder.query(&[("zid_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zid_access_token {
        req_builder = req_builder.query(&[("zid_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zid_authorization {
        req_builder = req_builder.query(&[("zid_authorization", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zid_refresh_token {
        req_builder = req_builder.query(&[("zid_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_flipkart_client_id {
        req_builder = req_builder.query(&[("flipkart_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_flipkart_client_secret {
        req_builder = req_builder.query(&[("flipkart_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allegro_client_id {
        req_builder = req_builder.query(&[("allegro_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allegro_client_secret {
        req_builder = req_builder.query(&[("allegro_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allegro_access_token {
        req_builder = req_builder.query(&[("allegro_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allegro_refresh_token {
        req_builder = req_builder.query(&[("allegro_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allegro_environment {
        req_builder = req_builder.query(&[("allegro_environment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zoho_client_id {
        req_builder = req_builder.query(&[("zoho_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zoho_client_secret {
        req_builder = req_builder.query(&[("zoho_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zoho_refresh_token {
        req_builder = req_builder.query(&[("zoho_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_zoho_region {
        req_builder = req_builder.query(&[("zoho_region", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiendanube_user_id {
        req_builder = req_builder.query(&[("tiendanube_user_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiendanube_access_token {
        req_builder = req_builder.query(&[("tiendanube_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiendanube_client_secret {
        req_builder = req_builder.query(&[("tiendanube_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_client_id {
        req_builder = req_builder.query(&[("otto_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_client_secret {
        req_builder = req_builder.query(&[("otto_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_app_id {
        req_builder = req_builder.query(&[("otto_app_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_refresh_token {
        req_builder = req_builder.query(&[("otto_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_environment {
        req_builder = req_builder.query(&[("otto_environment", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_otto_access_token {
        req_builder = req_builder.query(&[("otto_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiktokshop_app_key {
        req_builder = req_builder.query(&[("tiktokshop_app_key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiktokshop_app_secret {
        req_builder = req_builder.query(&[("tiktokshop_app_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiktokshop_refresh_token {
        req_builder = req_builder.query(&[("tiktokshop_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_tiktokshop_access_token {
        req_builder = req_builder.query(&[("tiktokshop_access_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_salla_client_id {
        req_builder = req_builder.query(&[("salla_client_id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_salla_client_secret {
        req_builder = req_builder.query(&[("salla_client_secret", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_salla_refresh_token {
        req_builder = req_builder.query(&[("salla_refresh_token", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_salla_access_token {
        req_builder = req_builder.query(&[("salla_access_token", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-store-key", value);
    };
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountConfigUpdateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
pub async fn account_failed_webhooks(configuration: &configuration::Configuration, start: Option<i32>, count: Option<i32>, ids: Option<&str>) -> Result<models::AccountFailedWebhooks200Response, Error<AccountFailedWebhooksError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_start = start;
    let p_count = count;
    let p_ids = ids;

    let uri_str = format!("{}/account.failed_webhooks.json", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_start {
        req_builder = req_builder.query(&[("start", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_count {
        req_builder = req_builder.query(&[("count", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_ids {
        req_builder = req_builder.query(&[("ids", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountFailedWebhooksError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
pub async fn account_supported_platforms(configuration: &configuration::Configuration, ) -> Result<models::AccountSupportedPlatforms200Response, Error<AccountSupportedPlatformsError>> {

    let uri_str = format!("{}/account.supported_platforms.json", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref apikey) = configuration.api_key {
        let key = apikey.key.clone();
        let value = match apikey.prefix {
            Some(ref prefix) => format!("{} {}", prefix, key),
            None => key,
        };
        req_builder = req_builder.header("x-api-key", value);
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountSupportedPlatformsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

